{
    "Angular Standalone Component": {
        "prefix": "a-component",
        "description": "Angular component",
        "body": [
            "import { Component, ChangeDetectionStrategy } from '@angular/core';",
            "",
            "",
            "@Component({",
            "\tstandalone: true,",
            "\timports: [],",
            "\tselector: '${1:selector-name}',",
            "\ttemplateUrl: '${2:name}.component.html',",
            "\tchangeDetection: ChangeDetectionStrategy.OnPush,",
            "})",
            "export class ${3:Name}Component {",
            "",
            "\tconstructor() { }",
            "",
            "}"
        ]
    },
    "Angular Service": {
        "prefix": "a-service",
        "description": "Angular Service",
        "body": [
            "import { Injectable } from '@angular/core';",
            "",
            "",
            "@Injectable({providedIn: ${1:'root'}})",
            "export class ${2:ServiceName}Service {",
            "",
            "\tconstructor() { }",
            "",
            "}"
        ]
    },
    "Angular Directive": {
        "prefix": "a-directive",
        "description": "Angular directive",
        "body": [
            "import { Directive } from '@angular/core';",
            "",
            "",
            "@Directive({",
            "\tstandalone: true,",
            "\tselector: '[${1:selector-name}]',",
            "\texportAs: '[${1:export-name}]',",
            "})",
            "export class ${2:Name}Directive {",
            "",
            "\tconstructor() { }",
            "",
            "}"
        ]
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "If Statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "\t$2",
            "} else {",
            "\t$0",
            "}"
        ],
        "description": "If-Else Statement"
    },
    "New Statement": {
        "prefix": "new",
        "body": [
            "const ${1:name} = new ${2:type}(${3:arguments});$0"
        ],
        "description": "New Statement"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
            "\tconst ${3:element} = ${2:array}[${1:index}];",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "For-Each Loop using =>": {
        "prefix": "foreach =>",
        "body": [
            "${1:array}.forEach(${2:element} => {",
            "\t$0",
            "});"
        ],
        "description": "For-Each Loop using =>"
    },
    "For-In Loop": {
        "prefix": "forin",
        "body": [
            "for (const ${1:key} in ${2:object}) {",
            "\tif (${2:object}.hasOwnProperty(${1:key})) {",
            "\t\tconst ${3:element} = ${2:object}[${1:key}];",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "For-In Loop"
    },
    "For-Of Loop": {
        "prefix": "forof",
        "body": [
            "for (const ${1:iterator} of ${2:object}) {",
            "\t$0",
            "}"
        ],
        "description": "For-Of Loop"
    },
    "comment": {
        "prefix": "/*",
        "body": [
            "/**",
            " * $0",
            " */"
        ],
        "description": "A simpple JSDoc comment."
    }
}
